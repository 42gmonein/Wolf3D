# include "rt.h"
#define FOV 120.0f
#define DIV_FOV 60.0f

typedef struct		s_pos
{
	double			x;
	double			y;
}					t_pos;

typedef struct		s_vector_inc
{
	double			dx;
	double			dy;
	double			dif;
}					t_vector_inc;

typedef struct		s_ray
{
	double			cam_x;
	double			pos_x;
	double			pos_y;
	double			map_x;
	double			map_y;
	double			dir_x;
	double			dir_y;
	double			plane_x;
	double			plane_y;
	double			side_x;
	double			side_y;
	double			wall_dist;
	double			step_x;
	double			step_y;
	double			delta_dist_x;
	double			delta_dist_y;
	int				hit;
	int				side;
}					t_ray;

t_vector_inc		set_vector_by_x(t_vector_inc vec)
{
	return ((t_vector_inc){
		vec.dx * fabs(1 / vec.dx),
		vec.dy * fabs(1 / vec.dx), 0});
}

t_vector_inc		set_vector_by_y(t_vector_inc vec)
{
	return ((t_vector_inc){
		vec.dx * fabs(1 / vec.dy),
		vec.dy * fabs(1 / vec.dy), 0});
}

int		raycast(t_env *env)
{
	t_ray	ray;
	int		x;
	double	dir_x;
	double	dir_y;
	int		i;

	dir_x = sin(((env->cam.axe - FOV / 2 / WIN_W) * M_PI) / 180);
	dir_y = cos(((env->cam.axe - FOV / 2 / WIN_W) * M_PI) / 180);
	ray.plane_x = 0;
	ray.plane_y = 0.66;
	x = -1;
	while (++x < WIN_W)
	{
		ray.cam_x = 2 * x / (double)WIN_W - 1;
		ray.pos_x = env->cam.pos_x;
		ray.pos_y = env->cam.pos_y;
		ray.dir_x = dir_x + ray.plane_x * ray.cam_x;
		ray.dir_y = dir_y + ray.plane_y * ray.cam_x;

		ray.map_x = (int)ray.pos_x;
		ray.map_y = (int)ray.pos_y;
		ray.delta_dist_x =
			sqrt(1 + (ray.dir_y * ray.dir_y) / (ray.dir_x * ray.dir_x));
		ray.delta_dist_y =
			sqrt(1 + (ray.dir_x * ray.dir_x) / (ray.dir_y * ray.dir_y));
		if (ray.dir_x < 0)
		{
			ray.step_x = -1;
			ray.side_x = (ray.pos_x - ray.map_x) * ray.delta_dist_x;
		}
		else
		{
			ray.step_x = 1;
			ray.side_x = (ray.map_x + 1.0f - ray.pos_x) * ray.delta_dist_x;
		}
		if (ray.dir_y < 0)
		{
			ray.step_y = -1;
			ray.side_y = (ray.pos_y - ray.map_y) * ray.delta_dist_y;
		}
		else
		{
			ray.step_y = 1;
			ray.side_y = (ray.map_y + 1.0f - ray.pos_y) * ray.delta_dist_y;
		}
		i = 0;
		while (ray.hit == 0)
		{
			if (ray.side_x < ray.side_y)
			{
				ray.side_x += ray.delta_dist_x;
				ray.map_x += ray.step_x;
				ray.side = 0;
			}
			else
			{
				ray.side_y += ray.delta_dist_y;
				ray.map_y += ray.step_y;
				ray.side = 1;
			}
		}
		if (ray.map_y < 0 || ray.map_x < 0
			|| env->map[(int)ray.map_y][(int)ray.map_x] != 0)
			{
				if (!(ray.map_y < 0 || ray.map_x < 0) && x == (int)WIN_W / 2))
					printf("%lf %lf\n", ray.map_y, ray.map_x);
				ray.hit = 1;
			}

	double		wall_dist;
		if (ray.side == 0)
			wall_dist =
				(ray.map_x - ray.pos_x + (1 - ray.step_x) / 2) / ray.dir_x;
		else
			wall_dist =
				(ray.map_y - ray.pos_y + (1 - ray.step_y) / 2) / ray.dir_y;
	
		int		line_height;
	
		line_height = (int)(WIN_H / wall_dist);
		int		draw_start = -line_height / 2 + (int)WIN_H / 2;
		if (draw_start < 0)
			draw_start = 0;
		int		draw_end = line_height / 2 + (int)WIN_H / 2;
		if (draw_end >= (int)WIN_H)
			draw_end = (int)WIN_H - 1;
		px2img(env->s_back, 0xFFFFFF, x, draw_end);
		px2img(env->s_back, 0xFFFFFF, x, draw_start);
	}
}

/*
int		raycast(t_env *env)
{
	t_ray			ray;
	t_vector_inc	y_inc;
	t_vector_inc	x_inc;
	int				x;
	double			i;

	ray.pos_x = env->cam.pos_x;
	ray.pos_y = env->cam.pos_y;
	ray.dir_x = sin(((env->cam.axe - FOV / 2 + FOV * x / WIN_W) * M_PI) / 180);
	ray.dir_y = cos(((env->cam.axe - FOV / 2 + FOV * x / WIN_W) * M_PI) / 180);
	y_inc = set_vector_by_y((t_vector_inc){ray.dir_x, ray.dir_y});
	y_inc.dif = ray.pos_y - (int)ray.pos_y;
	x_inc = set_vector_by_x((t_vector_inc){ray.dir_x, ray.dir_y});
	x_inc.dif = ray.pos_x - (int)ray.pos_x;
//	printf("axe = %lf -> %lf %lf -> x%lf %lf y%lf %lf\n", env->cam.axe, ray.dir_x, ray.dir_y, x_inc.dx, x_inc.dy, y_inc.dx, y_inc.dy);
	x = 0;
	px2img(env->s_back, 0xFFFFFF, ray.pos_x, ray.pos_y);
//	while (++x < WIN_W)
//	{
		ray.dir_x = sin(((env->cam.axe - DIV_FOV + FOV * (double)x / WIN_W) * M_PI) / 180.0f);
		ray.dir_y = cos(((env->cam.axe - DIV_FOV + FOV * (double)x / WIN_W) * M_PI) / 180.0f);
		y_inc = set_vector_by_y((t_vector_inc){ray.dir_x, ray.dir_y});
		y_inc.dif = (int)ray.pos_y % 20;//(ray.pos_y - (int)ray.pos_y);
		x_inc = set_vector_by_x((t_vector_inc){ray.dir_x, ray.dir_y});
		x_inc.dif = (int)ray.pos_x % 20;//(ray.pos_x - (int)ray.pos_x);
		ray.map_x = ray.pos_x - (int)ray.pos_x % 20 + (x_inc.dx < 0 ? 20 : 0);
		ray.map_y = ray.pos_y - (int)ray.pos_y % 20 + (y_inc.dy < 0 ? 20 : 0);
		printf("%lf %lf\n", x_inc.dif, y_inc.dif);
		i = 0;
		while ((i += 20) != -2 && i < 600)
		{
			px2img(env->s_back, 0xFF0000,
				ray.map_x + i * x_inc.dx,
				ray.map_y + i * x_inc.dy);
			px2img(env->s_back, 0xFF00,
				ray.map_x + i * y_inc.dx,
				ray.map_y + i * y_inc.dy);
		}
//	}
	return (1);
}*/
